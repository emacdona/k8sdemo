apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-statefulapp
  labels:
    helm.sh/chart: demo-0.1.0
    app.kubernetes.io/name: statefulapp
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 8080
      name: http
  clusterIP: None
  selector:
    app.kubernetes.io/name: statefulapp

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-statefulapp
  labels:
    helm.sh/chart: demo-0.1.0
    app.kubernetes.io/name: statefulapp
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  serviceName: {{ .Release.Name }}-statefulapp
  selector:
    matchLabels:
      app.kubernetes.io/name: statefulapp
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: statefulapp
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name }}-statefulapp
      securityContext:
        {}
      containers:
        - name: statefulapp
          securityContext:
            {}
          image: "kubedemo/statefulapp"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: statefulapp-storage
              mountPath: /tmp-foo
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: http
          resources:
            {}
  volumeClaimTemplates:
    - metadata:
        name: statefulapp-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
